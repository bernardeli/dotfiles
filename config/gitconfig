[user]
  email = ricardobcs@gmail.com
  name = Ricardo Bernardeli
[color]
  ui = auto
[github]
  user = bernardeli
[core]
  excludesfile = ~/.gitignore
  ignorecase = false
  editor = vim
[branch]
  autosetuprebase = always
[push]
  default = current
[diff]
  compactionHeuristic = true
[pager]
  log = diff-so-fancy | less
  show = diff-so-fancy | less
  diff = diff-so-fancy | less
[status]
  showUntrackedFiles = all
[merge]
  conflictstyle = diff3
[commit]
  gpgsign = true
[diff "ansible-vault"]
  textconv = PAGER=cat ansible-vault view
  cachetextconv = false
[alias]
  st = status
  s = status
  d = diff
  ds = diff --staged
  c = commit -m
  ci = commit -am
  co = checkout
  cp = cherry-pick
  l = log
  b = branch
  bd = branch -D
  ri = rebase -i
  cf = commit --fixup
  rim = rebase -i main --autosquash
  amend = commit --amend --no-edit
  aa = commit -a --amend --no-edit
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
  fp = "!f() { git symbolic-ref HEAD | cut -d \\/ -f3 ; }; git pull --rebase origin `f`"
  conflict = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim -p `f`"
  next = "!git add . && git rebase --continue"
  discart = "!git add . && git checkout -f"
  aftermerge = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); git checkout main; git pull --rebase; git remote prune origin; git branch -D $branch; }; f"
  after = aftermerge
  since-main = diff --name-only origin/main
  outstanding-branches = "!f() { git branch | grep -vw main | grep -v '^*' | wc -l; }; f"
  branch-main = "!f() { git branch $1 origin/main --no-track && git co $1; }; f"
  branch-main-regular = "!f() { git branch-main "$1-`date +%Y%m%d`"; }; f"
  latest-sha = log -n 1 --pretty=format:%H
  autofix = "!f() { git commit --fixup $(git latest-sha -- \"$GIT_PREFIX$1\") \"$GIT_PREFIX$1\"; }; f"
  superfix = "!for file in $(git ls-files -m); do git autofix $file; done"
  bm = branch-main
  x = "!fork"
  tree = log --oneline --decorate --graph --abbrev-commit
  wip = "!f() { git add -A && git commit -m \"WIP\"; }; f"
  unwip = "!f() { git log -n 1 | grep -q -c \"WIP\" && git reset HEAD~1; }; f"
  top = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); git wip; git co main; git fp; git co $branch; git rebase main; git unwip; }; f"
  open-pr = pull-request -o
  nuke-all-branches = "!f() { git branch | grep -v 'main' | xargs git branch -D; }; f"
  cob = checkout -b
  open = browse
  cm = "!f() { git commit -m \"$*\"; }; f"
  ls = ls-files
  df = "!f() { git diff $(git ls-files -m | fzf); }; f"
  lsc = diff-tree --no-commit-id --name-only -r
